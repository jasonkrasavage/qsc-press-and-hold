
--Pluging Created by Jason Krasavage

-- Information block for the plugin
PluginInfo = {
  Name = "Press and Hold w/ Gauge Fill",
  Version = "1.0",
  BuildVersion = "1.0.0.73",
  Id = "e3875502-a97b-4ad1-b5e5-2c5e33cf519a",
  Author = "Jason Krasavage",
  Description = "Advanced press and hold buttons with gauge fill feedback."  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 0, 87, 150 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Press and Hold w/ Gauge Fill " .. PluginInfo.BuildVersion
end

function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local controls = {}
  table.insert(controls,{
    Name          = "HoldTime",
    ControlType   = "Knob",
    ControlUnit   = "Float",
    Min           = 1,
    Max           = 60,
    UserPin       = true,
    PinStyle      = "Input",
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PulseTime",
    ControlType   = "Knob",
    ControlUnit   = "Float",
    Min           = 1,
    Max           = 6,
    UserPin       = true,
    PinStyle      = "Input",
    Count         = 1
  })
  table.insert(controls,{
    Name          = "ButtonWidth",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 2000,
    UserPin       = true,
    PinStyle      = "Input",
    Count         = 1
  })
  table.insert(controls,{
    Name          = "ButtonHeight",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 2000,
    UserPin       = true,
    PinStyle      = "Input",
    Count         = 1
  })
  table.insert(controls, {
    Name = "IsVertical",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  table.insert(controls, {
    Name = "BackgroundColor",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  table.insert(controls, {
    Name = "FillColor",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  table.insert(controls, {
    Name = "StrokeColor",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  table.insert(controls, {
    Name = "Buttons",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 6,
    UserPin = true,
    PinStyle = "Input"
  })
  table.insert(controls, {
    Name = "SvgGraphics",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 6,
    UserPin = false,
    PinStyle = "None"
  })
  table.insert(controls,{
    Name          = "Pressed",
    ControlType   = "Indicator",
    IndicatorType = "LED",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 6
  })
  table.insert(controls,{
    Name          = "Held",
    ControlType   = "Indicator",
    IndicatorType = "LED",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 6
  })
  return controls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  -- UI colors
  Clear    = {0,0,0,0}
  White    = {255,255,255}
  Black    = {0,0,0}
  Gray     = {105,105,105}
  Red      = {223,0,36}
  Blue     = {16,16,255}
  LED      = {255,0,0}
  LEDOff   = {124,0,0}
  Faders   = {124,124,124}
  Meters   = {110,198,241}
  GBGray   = {230,230,230}
  BoldText = {27,33,43}
  MainText = {51,51,51}
  
  local y = 0
  
  -- Header
  table.insert(graphics,{
    Type          = "GroupBox",
    Fill          = GBGray,
    CornerRadius  = 0,
    StrokeWidth   = 0,
    Position      = {0, 0},
    Size          = {482,58}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Press & Hold w/ Gauge Fill",
    HTextAlign    = "Center",
    VTextAlign    = "Center",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Bold Italic",
    FontColor     = BoldText,
    FontSize      = 24,
    Position      = {0,0},
    Size          = {482,58}
  })
  y = y + 59
  
  --Labels
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Setup",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Bold",
    FontColor     = BoldText,
    FontSize      = 18,
    Position      = {6, y},
    Size          = {150,22}
  })
  y = y + 23
  
  table.insert(graphics,{
    Type          = "GroupBox",
    Fill          = GBGray,
    CornerRadius  = 0,
    StrokeWidth   = 0,
    Position      = {6, y},
    Size          = {463,80}
  })
  y = y + 10
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Hold Time",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {10, y},
    Size          = {83,18}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Button Width",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {147, y},
    Size          = {95,18}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "BG Color",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {304, y},
    Size          = {95,18}
  })
  layout["HoldTime"] = {
    PrettyName    = "Setup~Hold Time",
    Style         = "Text",
    TextBoxStyle  = "Normal",
    Fill          = White,
    HTextAlign    = "Center",
    Position      = {102, y},
    Size          = {40,18}
  }
  layout["ButtonWidth"] = {
    PrettyName    = "Setup~Button Width",
    Style         = "Text",
    TextBoxStyle  = "Normal",
    Fill          = White,
    HTextAlign    = "Center",
    Position      = {253, y},
    Size          = {40,18}
  }
  layout["BackgroundColor"] = {
    PrettyName    = "Setup~BG Color",
    HTextAlign    = "Center",
    Position      = {410, y},
    Size          = {40,18}
  }
  y = y + 23
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Pulse Time",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {10, y},
    Size          = {83,18}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Button Height",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {147, y},
    Size          = {95,18}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Fill Color",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {304, y},
    Size          = {95,18}
  })
  layout["PulseTime"] = {
    PrettyName    = "Setup~Pulse Time",
    Style         = "Text",
    TextBoxStyle  = "Normal",
    Fill          = White,
    HTextAlign    = "Center",
    Position      = {102, y},
    Size          = {40,18}
  }
  layout["ButtonHeight"] = {
    PrettyName    = "Setup~Button Height",
    Style         = "Text",
    TextBoxStyle  = "Normal",
    Fill          = White,
    HTextAlign    = "Center",
    Position      = {253, y},
    Size          = {40,18}
  }
  layout["FillColor"] = {
    PrettyName    = "Setup~Fill Color",
    HTextAlign    = "Center",
    Position      = {410, y},
    Size          = {40,18}
  }
  y = y + 23
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Is Vertical?",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {10, y},
    Size          = {83,18}
  })
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Stroke Color",
    Fill          = Clear,
    HTextAlign    = "Right",
    Font          = "Roboto",
    FontColor     = MainText,
    FontSize      = 14,
    Position      = {304, y},
    Size          = {95,18}
  })
  layout["IsVertical"] = {
    PrettyName    = "Setup~Is Vertical?",
    ButtonStyle    = "Toggle",
    Position      = {102, y},
    Size          = {40,18}
  }
  layout["StrokeColor"] = {
    PrettyName    = "Setup~Stroke Color",
    HTextAlign    = "Center",
    Position      = {410, y},
    Size          = {40,18}
  }
  -- Background
  table.insert(graphics,{
    Type          = "GroupBox",
    Fill          = White,
    CornerRadius  = 0,
    StrokeWidth   = 0,
    Position      = {0, 0},
    Size          = {482,575},
    ZOrder        = -5000
  })
  
  y = y + 29
  --Labels
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Buttons & Graphics",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Bold",
    FontColor     = BoldText,
    FontSize      = 18,
    Position      = {6, y},
    Size          = {160,22}
  })
  y = y + 23
  table.insert(graphics,{
    Type          = "GroupBox",
    Fill          = GBGray,
    CornerRadius  = 0,
    StrokeWidth   = 0,
    Position      = {6, y},
    Size          = {463,178}
  })
  y = y + 10
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Buttons",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Regular",
    FontColor     = BoldText,
    FontSize      = 16,
    Position      = {22, y},
    Size          = {160,22}
  })
  y = y + 25
  x = 22
  for i = 1, 6 do
    layout["Buttons "..i] = {
      PrettyName    = "Buttons~Momentary Button "..i,
      ButtonStyle    = "Momentary",
      Position      = {x, y},
      Size          = {72,50}
    }
    x = x + 72
  end
  y = y + 51
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Graphics",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Regular",
    FontColor     = BoldText,
    FontSize      = 16,
    Position      = {22, y},
    Size          = {160,22}
  })
  y = y + 25
  x = 22
  for i = 1, 6 do
    layout["SvgGraphics "..i] = {
      PrettyName    = "Buttons~Graphic "..i,
      ButtonStyle    = "Trigger",
      Stroke        = 0,
      Padding       = 0,
      Margin        = 0,
      CornerRadius  = 0,
      Position      = {x, y},
      Size          = {72,50}
    }
    x = x + 72
  end
  y = y + 70
  --Labels
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Feedback",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Bold",
    FontColor     = BoldText,
    FontSize      = 18,
    Position      = {6, y},
    Size          = {160,22}
  })
  y = y + 23
  table.insert(graphics,{
    Type          = "GroupBox",
    Fill          = GBGray,
    CornerRadius  = 0,
    StrokeWidth   = 0,
    Position      = {6, y},
    Size          = {463,167}
  })
  y = y + 10
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Pressed",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Regular",
    FontColor     = BoldText,
    FontSize      = 16,
    Position      = {22, y},
    Size          = {160,22}
  })
  y = y + 35
  x = 47
  for i = 1, 6 do
    layout["Pressed "..i] = {
    PrettyName    = "Buttons~Pressed "..i,
    Style         = "Led",
    Position      = {x, y},
    Size          = {16,16},
    Margin        = 0
    }
    x = x + 72
  end
  y = y + 41
  table.insert(graphics,{
    Type          = "Label",
    Text          = "Held",
    HTextAlign    = "Left",
    Fill          = Clear,
    Font          = "Roboto",
    FontStyle     = "Regular",
    FontColor     = BoldText,
    FontSize      = 16,
    Position      = {22, y},
    Size          = {160,22}
  })
  y = y + 35
  x = 47
  for i = 1, 6 do
    layout["Held "..i] = {
    PrettyName    = "Buttons~Held "..i,
    Style         = "Led",
    Position      = {x, y},
    Size          = {16,16},
    Margin        = 0
    }
    x = x + 72
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --SVG LOGIC
  rapidjson = require("rapidjson")
  EzSVG = require "EzSVG"
  local FillDirection = ""
  local CornerRadius = 0
  local CurrentTimer = nil
  local TimeElapsed = 0
  
  if Controls.IsVertical.Boolean then 
    FillDirection = "vertical"
  else
    FillDirection = "horizontal"
  end
  
  Controls.IsVertical.EventHandler = function()
    if Controls.IsVertical.Boolean then 
      FillDirection = "vertical"
    else
      FillDirection = "horizontal"
    end
  end
  
  function draw(percentage)
    local docWidth = Controls.ButtonWidth.Value
    local docHeight = Controls.ButtonHeight.Value
    local doc = EzSVG.Document(docWidth, docHeight)
    
    local padding = 0
    local barWidth = docWidth - (padding * 2)
    local barHeight = docHeight - (padding * 2)
    
    -- Draw the background (empty) rectangle
    local background = EzSVG.Rect(
      padding,
      padding,
      barWidth,
      barHeight,
      CornerRadius,
      CornerRadius
    ):setStyle({
      fill = (Controls.BackgroundColor.String ~= "" and Controls.BackgroundColor.String) or "#E0E0E0",
      stroke = (Controls.StrokeColor.String ~= "" and Controls.StrokeColor.String) or "#808080",
      stroke_width = 2
    })
    doc:add(background)
    
    -- Draw the fill rectangle (progress)
    if percentage > 0 then
      local fillWidth = barWidth
      local fillHeight = barHeight
      local fillX = padding
      local fillY = padding
      
      if FillDirection == "horizontal" then
        fillWidth = barWidth * percentage
      else -- vertical
        fillHeight = barHeight * percentage
        fillY = padding + (barHeight * (1 - percentage))
      end
      
      local fill = EzSVG.Rect(
        fillX,
        fillY,
        fillWidth,
        fillHeight,
        CornerRadius,
        CornerRadius
      ):setStyle({
        fill = (Controls.FillColor.String ~= "" and Controls.FillColor.String) or "#4CAF50",
        fill_opacity = 1,
        stroke = "none"
      })
      doc:add(fill)
    end
    
    return doc:toString()
  end
  
  function updateGauge(control)
    TimeElapsed = TimeElapsed + 0.05  -- Increment by 50ms
    local percentage = math.min(TimeElapsed / GetHoldTime(), 1.0)
    
    control.Legend = rapidjson.encode({
      DrawChrome = false,
      IconData = Crypto.Base64Encode(draw(percentage))
    })
    
    if percentage >= 1.0 then
      stopGauge(control)
    end
  end
  
  function startGauge(control)
    stopGauge(control)
    TimeElapsed = 0
    CurrentTimer = Timer.New()
    CurrentTimer.EventHandler = function() updateGauge(control) end
    CurrentTimer:Start(0.05) -- Update every 50ms
  end
  
  function stopGauge(control)
    if CurrentTimer then
      CurrentTimer:Stop()
      CurrentTimer = nil
    end
    TimeElapsed = 0
    control.Legend = rapidjson.encode({
      DrawChrome = false,
      IconData = Crypto.Base64Encode(draw(0))
    })
  end
  
  -- PRESS AND HOLD LOGIC
  
  local press = {}
  local held = {}
  local pressed = {}
  
  for i = 1, 6 do
    table.insert(press, Controls.Buttons[i])
    table.insert(held, Controls.Held[i])
    table.insert(pressed, Controls.Pressed[i])
  end
  
  
  local busy = false
  local timer = Timer.New()
  local lastPressed = 0
  
  -- Helpers
  function GetPulseTime()
    if Controls.PulseTime.String ~= nil then
      return tonumber(Controls.PulseTime.String)
    else
      return 0.25
    end
  end
  
  function GetHoldTime()
    if Controls.HoldTime.Value ~= nil then
      return tonumber(Controls.HoldTime.String)
    else
      return 3
    end
  end
  
  
  --Events 
  timer.EventHandler = function ()
    timer:Stop()
    busy = false
    held[lastPressed].Boolean = true
    Timer.CallAfter(function () held[lastPressed].Boolean = false end, GetPulseTime())
  end
  
  for i = 1, 6 do
    press[i].EventHandler = function (ctl)
      if ctl.Boolean == true then
        startGauge(Controls.SvgGraphics[i])
        busy = true
        lastPressed = i
        timer:Start(GetHoldTime())
      else
        stopGauge(Controls.SvgGraphics[i])
        if busy == true then
          busy = false
          timer:Stop()
          pressed[i].Boolean = true
          Timer.CallAfter(function () pressed[i].Boolean = false end, GetPulseTime())
        end
      end
    end
  end
end
